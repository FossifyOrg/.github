name: Prepare Release PR

on:
  workflow_call:

concurrency:
  group: release-pr-${{ github.repository }}
  cancel-in-progress: true

jobs:
  release-pr:
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, 'chore(release)') }}
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout .github repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          repository: FossifyOrg/.github
          path: .github-repo

      - name: Get next version code
        id: version-code
        run: |
          currentVersionCode=$(grep '^VERSION_CODE=' gradle.properties | cut -d= -f2)
          nextVersionCode=$((currentVersionCode+1))
          echo "nextVersionCode=$nextVersionCode" >> $GITHUB_OUTPUT

      - name: Get next version name
        id: version-name
        uses: ietf-tools/semver-action@000ddb2ebacad350ff2a15382a344dc05ea4c0a4
        with:
          token: ${{ github.token }}
          branch: ${{ github.event.repository.default_branch }}
          noNewCommitBehavior: "warn"
          noVersionBumpBehavior: "warn"

      - name: Check if release branch needs update
        if: ${{ steps.version-name.outputs.nextStrict }}
        id: skip-update
        run: |
          set -euo pipefail
          MAIN="${{ github.event.repository.default_branch }}"
          RELEASE="fossifybot/release/v${{ steps.version-name.outputs.nextMajorStrict }}"

          if git rev-parse --verify -q "origin/$RELEASE"; then
            if git merge-base --is-ancestor "origin/$MAIN" "origin/$RELEASE"; then
              echo "needs_update=false" >> $GITHUB_OUTPUT
              echo "Release branch is up-to-date."
            else
              echo "needs_update=true" >> $GITHUB_OUTPUT
              echo "Release branch is behind the main branch."
            fi
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "Release branch doesn't exist yet."
          fi

      - name: Update files and check changelog
        if: ${{ steps.skip-update.outputs.needs_update == 'true' && steps.version-name.outputs.nextStrict }}
        id: update-version
        run: |
          chmod +x .github-repo/scripts/update-version.sh
          if ! .github-repo/scripts/update-version.sh \
            "${{ steps.version-name.outputs.nextStrict }}" \
            "${{ steps.version-code.outputs.nextVersionCode }}" \
            "${{ github.repository }}"; then
            echo "::error::Release aborted - No changes found in CHANGELOG.md [Unreleased] section"
            echo "::error::Please add your changes to the [Unreleased] section before creating a release"
            exit 1
          fi

      - name: Setup NodeJS
        if: ${{ steps.update-version.outcome == 'success' }}
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
        with:
          node-version: "20"

      - name: Install keep-a-changelog parser
        if: ${{ steps.update-version.outcome == 'success' }}
        run: npm install keep-a-changelog@2.6.2

      - name: Add translations entry in changelog
        if: ${{ steps.update-version.outcome == 'success' }}
        id: update_changelog
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { parser } = require('keep-a-changelog');
            const changelogPath = path.join(process.env.GITHUB_WORKSPACE, 'CHANGELOG.md');

            if (!fs.existsSync(changelogPath)) {
              throw new Error(`Changelog file not found at ${changelogPath}`);
            }

            const changelogContent = fs.readFileSync(changelogPath, 'utf8');
            let parsed;
            try {
              parsed = parser(changelogContent);
              console.log(`Parsed ${parsed.releases.length} releases from changelog.`);
            } catch (error) {
              throw new Error(`Failed to parse CHANGELOG.md: ${error.message}`);
            }

            const tagVersion = "${{ steps.version-name.outputs.nextStrict }}";
            const release = parsed.findRelease(tagVersion);
            if (!release) {
              throw new Error(`No changelog entry found for version ${tagVersion} in ${changelogPath}.`);
            }

            const changedEntries = release.changes.get('changed') || [];
            if (!changedEntries.some(entry => entry.toString().includes('Updated translations'))) {
              release.changed('Updated translations');
              const updatedChangelog = parsed.toString();       
              fs.writeFileSync(changelogPath, updatedChangelog, 'utf8');
              console.log(`Added "Updated translations" to version ${tagVersion}`);
            } else {
              console.log(`"Updated translations" already present for version ${tagVersion}.`);
            }

      - name: Normalize changelog
        if: ${{ steps.update-version.outcome == 'success' }}
        run: |
          npx keep-a-changelog --file="CHANGELOG.md" --no-v-prefix

      - name: Extract changelog notes
        if: ${{ steps.update-version.outcome == 'success' }}
        id: extract_changelog
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { formatForGitHub, formatForFastlane } = require('./.github-repo/scripts/changelog-parser.js');

            const changelogPath = path.join(process.env.GITHUB_WORKSPACE, 'CHANGELOG.md');
            const tagVersion = "${{ steps.version-name.outputs.nextStrict }}";
            if (!tagVersion) {
              throw new Error('VERSION_NAME environment variable is not set.');
            }

            try {
              const fastlaneNotes = formatForFastlane(changelogPath, tagVersion);
              const versionCode = "${{ steps.version-code.outputs.nextVersionCode }}";
              const metadataPath = path.join(process.env.GITHUB_WORKSPACE, 'fastlane', 'metadata', 'android', 'en-US', 'changelogs');
              if (!fs.existsSync(metadataPath)) {
                fs.mkdirSync(metadataPath, { recursive: true });
              }
              fs.writeFileSync(path.join(metadataPath, `${versionCode}.txt`), fastlaneNotes);

              // Use GitHub format for the PR body
              const notes = formatForGitHub(changelogPath, tagVersion,  null, process.env.GITHUB_REPOSITORY);
              core.setOutput('changelog', notes);
            } catch (error) {
              core.setFailed(error.message);
              return;
            }

      - id: app-token
        if: ${{ steps.update-version.outcome == 'success' }}
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Create or update PR
        if: ${{ steps.update-version.outcome == 'success' && steps.extract_changelog.outcome == 'success' }}
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e
        with:
          token: ${{ steps.app-token.outputs.token }}
          sign-commits: true
          labels: "testers needed"
          branch: fossifybot/release/v${{ steps.version-name.outputs.nextMajorStrict }}
          commit-message: "chore(release): v${{ steps.version-name.outputs.nextStrict }} (${{ steps.version-code.outputs.nextVersionCode }})"
          title: "chore(release): v${{ steps.version-name.outputs.nextStrict }} (${{ steps.version-code.outputs.nextVersionCode }})"
          body: |
            ## Release notes

            ${{ steps.extract_changelog.outputs.changelog }}
          add-paths: |
            CHANGELOG.md
            gradle.properties
            .fossify/release-marker.txt
            fastlane/metadata/android/en-US/changelogs/*.txt
